language: python

matrix:
  include:
    - os: linux
      env: INSTALL=no TESTFILE=./testing_one.py RELEASE=no PYLINT=yes
      python: 2.7

install:
    - if [ ${INSTALL} = "yes" ]; then
        pip install pexpect ;
        pip install requests ;
        pip install lxml ;
        pip install selenium==2.53.0 ;
      fi

script:
    - export BRANCH=$(if [ ${TRAVIS_PULL_REQUEST} = "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
    - echo "The branch being built is - $BRANCH"
    - if [ ${BRANCH} = "release" ] ; then
        python $TESTFILE ;
      else
        if [ ${BRANCH} != "release"  -a  ${RELEASE} = "no" ] ; then
          python $TESTFILE ;
        else
          echo $TESTFILE "will not run as this is not a release branch" ;
        fi
      fi
    - #!bin/bash
      if [ "${PYLINT}" = "yes" ] ; then
        git --no-pager diff --name-only origin/master "${BRANCH}"  | grep -v 'OSS' | grep '.py$' | xargs -L 1 pylint || true
        git checkout "${BRANCH}"
        git --no-pager diff --name-only "${BRANCH}" origin/master  | grep -v 'OSS' | grep '.py$' | xargs -L 1 pylint | tee pylint_result.txt || true

        grep "Your code has been rated" pylint_result.txt > score.txt
        grep "Module" pylint_result.txt > filename.txt

        sed -i -e 's/\** Module//g' filename.txt
        sed -i -e 's/Your code//g' score.txt
        paste -d "^" filename.txt score.txt | column -t -s "^" | tee summary.txt

        set +x;
        echo "Files that doesn't meet the pylint score requirement (>5 with score increase)";
        status="pass";
        while read -r line;
        do 
          line_status="pass";
          num1=$(grep -oP "at \K[0-9\.\-]*" <<< "$line"); 
          num2="5";
          if [ "$(echo "$num1 < $num2" | bc -l)" ] ; then
              status="fail";
              line_status="fail";
          fi
          
          num3=$(grep -oP "previous run.*/10, \K[0-9\.\-+]*" <<< "$line" | tr -d "+");
          num4="0";
          if [ "$(echo "$num3 < $num4" | bc -l)" ] ; then
              status="fail";
              line_status="fail";
          fi

          if [ "$line_status" = "fail" ]; then
              filename=$(grep -oP "[^\s]{2,}" <<< "$line" | head -1);
              echo "$filename ($num1, $num3)";
          fi
        done < summary.txt

        if [ "$status" = "fail" ] ; then
          exit 1;
        else
          exit 0;
        fi
      fi
    - ls -l